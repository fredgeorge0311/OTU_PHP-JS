includes:
	- .phpstan-baseline.neon

parameters:
    level: 8
    inferPrivatePropertyTypeFromConstructor: true
    reportUnmatchedIgnoredErrors: true
    treatPhpDocTypesAsCertain: false
    tmpDir: var/cache/phpstan

    symfony:
        constant_hassers: false
        container_xml_path: 'var/cache/production____REVISION___/container.xml'
        console_application_loader: tests/phpstan-console-application.php

    doctrine:
        repositoryClass: Shopware\Components\Model\ModelRepository
        objectManagerLoader: tests/phpstan-doctrine-model-manager.php

    scanDirectories:
        - %currentWorkingDirectory%/var/cache/production____REVISION___/doctrine
        - %currentWorkingDirectory%/var/cache/production____REVISION___/proxies
        - %currentWorkingDirectory%/engine/Library

    paths:
        - %currentWorkingDirectory%/engine/Shopware
        - %currentWorkingDirectory%/tests
        - %currentWorkingDirectory%/engine/Library/Enlight
    excludes_analyse:
        - %currentWorkingDirectory%/engine/Shopware/Plugins/Community
        - %currentWorkingDirectory%/engine/Shopware/Plugins/Local
        - %currentWorkingDirectory%/engine/Shopware/Components/DependencyInjection/LegacyPhpDumper.php # is copied from Symfony. To keep it comparable, we don't change it
        - %currentWorkingDirectory%/tests/Functional/Components/DependencyInjection/LegacyPhpDumperTest.php
    ignoreErrors:
        - '#apcu_#'

        # Interface / Implementation Switch
        - '#expects Shopware\\Bundle\\SearchBundle\\Facet\\[a-zA-Z]+Facet, Shopware\\Bundle\\SearchBundle\\[a-zA-Z]+Interface given#'
        - '#expects Shopware\\Bundle\\SearchBundle\\Condition\\[a-zA-Z]+Condition, Shopware\\Bundle\\SearchBundle\\[a-zA-Z]+Interface given#'
        # Product/Shopcontext mixup
        - '#expects Shopware\\Bundle\\StoreFrontBundle\\Struct\\ProductContextInterface, Shopware\\Bundle\\StoreFrontBundle\\Struct\\ShopContextInterface given#'

        # We manually check if the class exists before instantiating / using it
        - '#PHPDoc tag \@var for variable \$payPalInstaller contains unknown class SwagPaymentPayPalUnified\\Setup\\FirstRunWizardInstaller#'

        - # Seem to be issues, but need tests to verify changes there
            message: '#Negated boolean expression is always false#'
            path: 'engine/Shopware/Core/sArticles.php'
        -
            message: '#Comparison operation ">=" between int<1, max> and 1 is always true#'
            path: 'engine/Shopware/Core/sArticles.php'
        -
            message: '#Comparison operation "<" between \(array\|float\|int\) and 0 results in an error\.#'
            path: engine/Shopware/Core/sAdmin.php
        -
            message: '#Call to static method PHPUnit\\Framework\\Assert::assertIsArray\(\) with false will always evaluate to false\.#'
            path: tests/Functional/Core/AdminTest.php

        - # We override the method in higher class inheritance to public method
            message: '#Call to protected method verifyPage#'
            path: 'tests/Mink/features/bootstrap/SpecialContext.php'

        # Some day this should be specified
        - '#no value type specified in iterable type Enlight_Components_Snippet_Namespace#'
        - '#no value type specified in iterable type Enlight_Config#'
        - '#no value type specified in iterable type Enlight_Plugin_PluginCollection#'
        - '#no value type specified in iterable type Enlight_Plugin_PluginManager#'
        - '#no value type specified in iterable type Enlight_Event_EventArgs#'
        - '#no value type specified in iterable type Doctrine\\#'

        # This method does not exists, but it does not throw an error. Needs to be checked
        - '#Call to an undefined method Enlight_Template_Manager::setCompileId\(\)#'

        # Needs some improvements in the doctrine PHPStan extensions: see https://github.com/phpstan/phpstan-doctrine/pull/167
        - '#Cannot call method fetch.*\(\) on Doctrine\\DBAL\\.*Statement\|int#'

        - # This property contains many different repositories, so we do not specify the type
            message: '#with generic class Shopware\\Components\\Model\\ModelRepository does not specify its types: TEntityClass#'
            path: engine/Shopware/Controllers/Backend/Config.php
        - # The config stores values as serialized strings, but the getter of the models return the actual type like bool or int
            message: '#::\$value type mapping mismatch: database|property can contain #'
            paths:
                - engine/Shopware/Models/Config/Element.php
                - engine/Shopware/Models/Config/Value.php
